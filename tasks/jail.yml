---
- name: Check if jail already exists
  command: ezjail-admin config -r test {{ jail.name }}
  ignore_errors: True
  register: jail_exists

- name: Create the jail
  command: ezjail-admin create {{ jail.name }} {{ jail.ip_address }}
  when: jail_exists|failed

- name: Optionally enable ACL on the ZFS dataset
  zfs:
    name: "{{ ezjail_jailzfs }}/{{ jail.name }}"
    state: present
    aclinherit: passthrough
    aclmode: passthrough
  when: jail.enable_zfs_acls is defined and jail.enable_zfs_acls

- name: Check if resolv.conf alreay exists
  stat: path=/usr/jails/{{ jail.name }}/etc/resolv.conf
  register: resolv_conf_present

- name: Copy resolv.conf to jail
  copy: remote_src=True src=/etc/resolv.conf dest=/usr/jails/{{ jail.name }}/etc/resolv.conf
  when: resolv_conf_present.stat.exists == False

- name: Allow the jail to use raw sockets
  lineinfile:
    dest: "/usr/local/etc/ezjail/{{ jail.name }}"
    regexp: ^export jail_{{ jail.name }}_parameters
    line: export jail_{{ jail.name }}_parameters={{ jail.parameters|to_json }}

- name: Configure the rcorder of the jail 1/2
  lineinfile:
    dest: "/usr/local/etc/ezjail/{{ jail.name }}"
    regexp: '^# PROVIDE:'
    line: '# PROVIDE: ezjail_jail_{{ jail.name }}'

- name: Configure the rcorder of the jail 2/2
  lineinfile:
    dest: "/usr/local/etc/ezjail/{{ jail.name }}"
    regexp: '^# REQUIRE:'
    line: '# REQUIRE: {% for j in jail.started_after %}  ezjail_jail_{{j}} {% endfor %}'
  when: jail.started_after is defined

- name: Ensure sshd is enabled in the jail
  sysrc: name=sshd_enable value=YES dest=/usr/jails/{{ jail.name }}/etc/rc.conf
  when: jail.started and jail.start_ssh

- name: Ensure sshd is only listening on the jail address
  lineinfile:
    dest: /usr/jails/{{ jail.name }}/etc/ssh/sshd_config
    regexp: '^ListenAddress '
    line: ListenAddress {{ jail.ip_address }}
  when: jail.start_ssh

- name: Ensure the ssh folder of user ansible is present
  file:
    path: /usr/jails/{{ jail.name }}/home/ansible/.ssh
    state: directory
    mode: 0755
    owner: root
    group: wheel

- name: Ensure the authorized_keys of user ansible is present
  copy:
    dest: /usr/jails/{{ jail.name }}/home/ansible/.ssh/authorized_keys
    content: "{{ lookup('file', ansible_ssh_private_key_file+'.pub') }}"
    force: no
    mode: 0644
    owner: root
    group: wheel
  when: jail.start_ssh

- name: Check if the jail is already running
  command: jls -j {{ jail.name }}
  ignore_errors: yes
  register: jail_is_running

- name: Ensure the jail is started
  command: ezjail-admin start {{ jail.name }}
  when: jail.started and jail_is_running.rc == 1

- name: Ensure the jail is stopped
  command: ezjail-admin stop {{ jail.name }}
  when: not jail.started and jail_is_running.rc == 0

- name: Make sure pkg is installed in the jail
  command: env ASSUME_ALWAYS_YES=YES pkg -j {{ jail.name }} install pkg
  when: jail.started

- name: Make sure python27 is installed in the jail
  command: env ASSUME_ALWAYS_YES=YES pkg -j {{ jail.name }} install python27
  when: jail.started

- name: Check if the ansible user exists in the jail
  command: ezjail-admin console -e "getent passwd ansible" {{ jail.name }}
  ignore_errors: yes
  when: jail.started
  register: ansible_user_exists_in_jail

- name: Ensure the ansible user exists in the jail
  command: ezjail-admin console -e "pw useradd -m -G wheel -s /bin/sh -n ansible" {{ jail.name }}
  when: jail.started and ansible_user_exists_in_jail.rc != 0

- name: Install sudo in the jail
  command: env ASSUME_ALWAYS_YES=YES pkg -j {{ jail.name }} install sudo
  when: jail.started and jail.use_sudo

- name: Allow wheel to sudo what they want
  lineinfile:
    dest: /usr/jails/{{ jail.name }}/usr/local/etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
  when: jail.use_sudo
